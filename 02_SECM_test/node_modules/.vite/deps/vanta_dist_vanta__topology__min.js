import {
  __commonJS
} from "./chunk-2TUXWMP5.js";

// node_modules/vanta/dist/vanta.topology.min.js
var require_vanta_topology_min = __commonJS({
  "node_modules/vanta/dist/vanta.topology.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports._vantaEffect = t() : e._vantaEffect = t();
    }("undefined" != typeof self ? self : exports, () => (() => {
      "use strict";
      var e = { d: (t2, s2) => {
        for (var i2 in s2) e.o(s2, i2) && !e.o(t2, i2) && Object.defineProperty(t2, i2, { enumerable: true, get: s2[i2] });
      }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      } }, t = {};
      e.r(t), e.d(t, { default: () => u }), Number.prototype.clamp = function(e2, t2) {
        return Math.min(Math.max(this, e2), t2);
      };
      const s = (e2) => "number" == typeof e2 ? "#" + ("00000" + e2.toString(16)).slice(-6) : e2;
      function i(e2) {
        for (; e2.children && e2.children.length > 0; ) i(e2.children[0]), e2.remove(e2.children[0]);
        e2.geometry && e2.geometry.dispose(), e2.material && (Object.keys(e2.material).forEach((t2) => {
          e2.material[t2] && null !== e2.material[t2] && "function" == typeof e2.material[t2].dispose && e2.material[t2].dispose();
        }), e2.material.dispose());
      }
      const o = "object" == typeof window;
      let n = o && window.THREE || {};
      o && !window.VANTA && (window.VANTA = {});
      const r = o && window.VANTA || {};
      r.register = (e2, t2) => r[e2] = (e3) => new t2(e3), r.version = "0.5.24";
      const h = function() {
        return Array.prototype.unshift.call(arguments, "[VANTA]"), console.error.apply(this, arguments);
      };
      r.VantaBase = class {
        constructor(e2 = {}) {
          if (!o) return false;
          r.current = this, this.windowMouseMoveWrapper = this.windowMouseMoveWrapper.bind(this), this.windowTouchWrapper = this.windowTouchWrapper.bind(this), this.windowGyroWrapper = this.windowGyroWrapper.bind(this), this.resize = this.resize.bind(this), this.animationLoop = this.animationLoop.bind(this), this.restart = this.restart.bind(this);
          const t2 = "function" == typeof this.getDefaultOptions ? this.getDefaultOptions() : this.defaultOptions;
          if (this.options = Object.assign({ mouseControls: true, touchControls: true, gyroControls: false, minHeight: 200, minWidth: 200, scale: 1, scaleMobile: 1 }, t2), (e2 instanceof HTMLElement || "string" == typeof e2) && (e2 = { el: e2 }), Object.assign(this.options, e2), this.options.THREE && (n = this.options.THREE), this.el = this.options.el, null == this.el) h('Instance needs "el" param!');
          else if (!(this.options.el instanceof HTMLElement)) {
            const e3 = this.el;
            if (this.el = (i2 = e3, document.querySelector(i2)), !this.el) return void h("Cannot find element", e3);
          }
          var i2;
          this.prepareEl(), this.initThree(), this.setSize();
          try {
            this.init();
          } catch (e3) {
            return h("Init error", e3), this.renderer && this.renderer.domElement && this.el.removeChild(this.renderer.domElement), void (this.options.backgroundColor && (console.log("[VANTA] Falling back to backgroundColor"), this.el.style.background = s(this.options.backgroundColor)));
          }
          this.initMouse(), this.resize(), this.animationLoop();
          const a2 = window.addEventListener;
          a2("resize", this.resize), window.requestAnimationFrame(this.resize), this.options.mouseControls && (a2("scroll", this.windowMouseMoveWrapper), a2("mousemove", this.windowMouseMoveWrapper)), this.options.touchControls && (a2("touchstart", this.windowTouchWrapper), a2("touchmove", this.windowTouchWrapper)), this.options.gyroControls && a2("deviceorientation", this.windowGyroWrapper);
        }
        setOptions(e2 = {}) {
          Object.assign(this.options, e2), this.triggerMouseMove();
        }
        prepareEl() {
          let e2, t2;
          if ("undefined" != typeof Node && Node.TEXT_NODE) for (e2 = 0; e2 < this.el.childNodes.length; e2++) {
            const t3 = this.el.childNodes[e2];
            if (t3.nodeType === Node.TEXT_NODE) {
              const e3 = document.createElement("span");
              e3.textContent = t3.textContent, t3.parentElement.insertBefore(e3, t3), t3.remove();
            }
          }
          for (e2 = 0; e2 < this.el.children.length; e2++) t2 = this.el.children[e2], "static" === getComputedStyle(t2).position && (t2.style.position = "relative"), "auto" === getComputedStyle(t2).zIndex && (t2.style.zIndex = 1);
          "static" === getComputedStyle(this.el).position && (this.el.style.position = "relative");
        }
        applyCanvasStyles(e2, t2 = {}) {
          Object.assign(e2.style, { position: "absolute", zIndex: 0, top: 0, left: 0, background: "" }), Object.assign(e2.style, t2), e2.classList.add("vanta-canvas");
        }
        initThree() {
          n.WebGLRenderer ? (this.renderer = new n.WebGLRenderer({ alpha: true, antialias: true }), this.el.appendChild(this.renderer.domElement), this.applyCanvasStyles(this.renderer.domElement), isNaN(this.options.backgroundAlpha) && (this.options.backgroundAlpha = 1), this.scene = new n.Scene()) : console.warn("[VANTA] No THREE defined on window");
        }
        getCanvasElement() {
          return this.renderer ? this.renderer.domElement : this.p5renderer ? this.p5renderer.canvas : void 0;
        }
        getCanvasRect() {
          const e2 = this.getCanvasElement();
          return !!e2 && e2.getBoundingClientRect();
        }
        windowMouseMoveWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          const s2 = e2.clientX - t2.left, i2 = e2.clientY - t2.top;
          s2 >= 0 && i2 >= 0 && s2 <= t2.width && i2 <= t2.height && (this.mouseX = s2, this.mouseY = i2, this.options.mouseEase || this.triggerMouseMove(s2, i2));
        }
        windowTouchWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          if (1 === e2.touches.length) {
            const s2 = e2.touches[0].clientX - t2.left, i2 = e2.touches[0].clientY - t2.top;
            s2 >= 0 && i2 >= 0 && s2 <= t2.width && i2 <= t2.height && (this.mouseX = s2, this.mouseY = i2, this.options.mouseEase || this.triggerMouseMove(s2, i2));
          }
        }
        windowGyroWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          const s2 = Math.round(2 * e2.alpha) - t2.left, i2 = Math.round(2 * e2.beta) - t2.top;
          s2 >= 0 && i2 >= 0 && s2 <= t2.width && i2 <= t2.height && (this.mouseX = s2, this.mouseY = i2, this.options.mouseEase || this.triggerMouseMove(s2, i2));
        }
        triggerMouseMove(e2, t2) {
          void 0 === e2 && void 0 === t2 && (this.options.mouseEase ? (e2 = this.mouseEaseX, t2 = this.mouseEaseY) : (e2 = this.mouseX, t2 = this.mouseY)), this.uniforms && (this.uniforms.iMouse.value.x = e2 / this.scale, this.uniforms.iMouse.value.y = t2 / this.scale);
          const s2 = e2 / this.width, i2 = t2 / this.height;
          "function" == typeof this.onMouseMove && this.onMouseMove(s2, i2);
        }
        setSize() {
          this.scale || (this.scale = 1), "undefined" != typeof navigator && (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 600) && this.options.scaleMobile ? this.scale = this.options.scaleMobile : this.options.scale && (this.scale = this.options.scale), this.width = Math.max(this.el.offsetWidth, this.options.minWidth), this.height = Math.max(this.el.offsetHeight, this.options.minHeight);
        }
        initMouse() {
          (!this.mouseX && !this.mouseY || this.mouseX === this.options.minWidth / 2 && this.mouseY === this.options.minHeight / 2) && (this.mouseX = this.width / 2, this.mouseY = this.height / 2, this.triggerMouseMove(this.mouseX, this.mouseY));
        }
        resize() {
          this.setSize(), this.camera && (this.camera.aspect = this.width / this.height, "function" == typeof this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix()), this.renderer && (this.renderer.setSize(this.width, this.height), this.renderer.setPixelRatio(window.devicePixelRatio / this.scale)), "function" == typeof this.onResize && this.onResize();
        }
        isOnScreen() {
          const e2 = this.el.offsetHeight, t2 = this.el.getBoundingClientRect(), s2 = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop, i2 = t2.top + s2;
          return i2 - window.innerHeight <= s2 && s2 <= i2 + e2;
        }
        animationLoop() {
          this.t || (this.t = 0), this.t2 || (this.t2 = 0);
          const e2 = performance.now();
          if (this.prevNow) {
            let t2 = (e2 - this.prevNow) / (1e3 / 60);
            t2 = Math.max(0.2, Math.min(t2, 5)), this.t += t2, this.t2 += (this.options.speed || 1) * t2, this.uniforms && (this.uniforms.iTime.value = 0.016667 * this.t2);
          }
          return this.prevNow = e2, this.options.mouseEase && (this.mouseEaseX = this.mouseEaseX || this.mouseX || 0, this.mouseEaseY = this.mouseEaseY || this.mouseY || 0, Math.abs(this.mouseEaseX - this.mouseX) + Math.abs(this.mouseEaseY - this.mouseY) > 0.1 && (this.mouseEaseX += 0.05 * (this.mouseX - this.mouseEaseX), this.mouseEaseY += 0.05 * (this.mouseY - this.mouseEaseY), this.triggerMouseMove(this.mouseEaseX, this.mouseEaseY))), (this.isOnScreen() || this.options.forceAnimate) && ("function" == typeof this.onUpdate && this.onUpdate(), this.scene && this.camera && (this.renderer.render(this.scene, this.camera), this.renderer.setClearColor(this.options.backgroundColor, this.options.backgroundAlpha)), this.fps && this.fps.update && this.fps.update(), "function" == typeof this.afterRender && this.afterRender()), this.req = window.requestAnimationFrame(this.animationLoop);
        }
        restart() {
          if (this.scene) for (; this.scene.children.length; ) this.scene.remove(this.scene.children[0]);
          "function" == typeof this.onRestart && this.onRestart(), this.init();
        }
        init() {
          "function" == typeof this.onInit && this.onInit();
        }
        destroy() {
          "function" == typeof this.onDestroy && this.onDestroy();
          const e2 = window.removeEventListener;
          e2("touchstart", this.windowTouchWrapper), e2("touchmove", this.windowTouchWrapper), e2("scroll", this.windowMouseMoveWrapper), e2("mousemove", this.windowMouseMoveWrapper), e2("deviceorientation", this.windowGyroWrapper), e2("resize", this.resize), window.cancelAnimationFrame(this.req);
          const t2 = this.scene;
          t2 && t2.children && i(t2), this.renderer && (this.renderer.domElement && this.el.removeChild(this.renderer.domElement), this.renderer = null, this.scene = null), r.current === this && (r.current = null);
        }
      };
      const a = r.VantaBase;
      let c = "object" == typeof window && window.p5;
      class p extends a {
        constructor(e2) {
          c = e2.p5 || c, super(e2), this.mode = "p5";
        }
        initP5(e2) {
          const t2 = this, i2 = e2.createCanvas(t2.width, t2.height);
          i2.parent(t2.el), t2.applyCanvasStyles(e2.canvas, { background: s(t2.options.backgroundColor) }), t2.p5renderer = i2, t2.p5canvas = e2.canvas, t2.p5 = e2;
        }
        restart() {
          this.p5 && "object" == typeof this.p5 && this.p5.remove(), super.restart();
        }
        destroy() {
          this.p5 && "object" == typeof this.p5 && this.p5.remove(), super.destroy();
        }
        resize() {
          super.resize(), this.p5 && this.p5.resizeCanvas && this.p5.resizeCanvas(this.width, this.height);
        }
      }
      let l = "object" == typeof window && window.p5;
      class d extends p {
        static initClass() {
          this.prototype.p5 = true, this.prototype.defaultOptions = { color: 9016910, backgroundColor: 8738 };
        }
        constructor(e2) {
          l = e2.p5 || l, super(e2);
        }
        onInit() {
          const e2 = this;
          new l(function(t2) {
            let i2 = e2.width, o2 = e2.height, n2 = (i2 + 200) / 10, r2 = (o2 + 200) / 10, h2 = [], a2 = [], c2 = 0;
            function p2(e3, s2, i3) {
              let o3 = 0, n3 = 1, r3 = t2.createVector(0, 0), h3 = t2.createVector(0, 0);
              for (let a4 = 0; a4 < 100; a4++) {
                let c3 = a4 / 100 * t2.TAU, p3 = t2.createVector(e3 + t2.cos(c3) * i3, s2 + t2.sin(c3) * i3), l2 = t2.noise(p3.x, p3.y);
                l2 > o3 && (o3 = l2, r3.x = p3.x, r3.y = p3.y), l2 < n3 && (n3 = l2, h3.x = p3.x, h3.y = p3.y);
              }
              let a3 = t2.createVector(h3.x - r3.x, h3.y - r3.y);
              return a3.normalize().mult(o3 - n3), a3;
            }
            function d2(e3, t3) {
              return (e3 % t3 + t3) % t3;
            }
            t2.setup = function() {
              e2.initP5(t2), t2.smooth(), t2.noStroke(), function() {
                for (let e3 = 0; e3 < 4500; e3++) {
                  let s2 = t2.random(t2.width + 200), i3 = t2.random(t2.height + 200);
                  a2.push({ prev: t2.createVector(s2, i3), pos: t2.createVector(s2, i3), vel: t2.createVector(0, 0), acc: t2.createVector(0, 0), col: t2.random(255), seed: e3 });
                }
              }(), function() {
                for (let e3 = 0; e3 < r2; e3++) {
                  let t3 = [];
                  for (let s2 = 0; s2 < n2; s2++) t3.push(p2(3e-3 * s2, 3e-3 * e3, 0.1));
                  h2.push(t3);
                }
              }();
            }, t2.draw = function() {
              t2.translate(-100, -100), function() {
                for (let i3 = 0; i3 < 4500; i3++) {
                  let o3 = a2[i3], n3 = (e3 = o3.pos.x, s2 = o3.pos.y, e3 = t2.constrain(e3, 0, t2.width + 200), s2 = t2.constrain(s2, 0, t2.height + 200), h2[t2.floor(s2 / 10)][t2.floor(e3 / 10)]);
                  o3.prev.x = o3.pos.x, o3.prev.y = o3.pos.y, o3.pos.x = d2(o3.pos.x + o3.vel.x, t2.width + 200), o3.pos.y = d2(o3.pos.y + o3.vel.y, t2.height + 200), o3.vel.add(o3.acc).normalize().mult(2.2), o3.acc = t2.createVector(0, 0), o3.acc.add(n3).mult(3);
                }
                var e3, s2;
              }(), function() {
                t2.strokeWeight(1), t2.stroke(((e3, t3 = 1) => {
                  const i3 = s(e3), o3 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(i3), n3 = o3 ? { r: parseInt(o3[1], 16), g: parseInt(o3[2], 16), b: parseInt(o3[3], 16) } : null;
                  return "rgba(" + n3.r + "," + n3.g + "," + n3.b + "," + t3 + ")";
                })(e2.options.color, 0.05));
                for (let e3 = 0; e3 < a2.length; e3++) l.Vector.dist(a2[e3].prev, a2[e3].pos) < 10 && t2.line(a2[e3].prev.x, a2[e3].prev.y, a2[e3].pos.x, a2[e3].pos.y);
              }(), c2 += 2e-3;
            };
          });
        }
      }
      d.initClass();
      const u = r.register("TOPOLOGY", d);
      return t;
    })());
  }
});
export default require_vanta_topology_min();
//# sourceMappingURL=vanta_dist_vanta__topology__min.js.map
